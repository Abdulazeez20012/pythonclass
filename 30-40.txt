Awesome! Let's proceed with questions 31-40. Here are the next set of programming questions with their respective solutions and test cases.

---

### 31. **Find the Largest Element in a List**

#### Question:
Write a function `find_largest(lst)` that returns the largest element in a list.

#### Tests:
1. `find_largest([1, 2, 3, 4])` should return `4`.
2. `find_largest([10, 5, 3, 20])` should return `20`.
3. `find_largest([5])` should return `5`.

#### Solution:

```python
def find_largest(lst):
    return max(lst)

import unittest

class TestFindLargest(unittest.TestCase):
    def test_find_largest(self):
        self.assertEqual(find_largest([1, 2, 3, 4]), 4)
        self.assertEqual(find_largest([10, 5, 3, 20]), 20)
        self.assertEqual(find_largest([5]), 5)

if __name__ == "__main__":
    unittest.main()
```

---

### 32. **Check if a String is a Palindrome**

#### Question:
Write a function `is_palindrome(s)` that checks whether a string is a palindrome.

#### Tests:
1. `is_palindrome("racecar")` should return `True`.
2. `is_palindrome("hello")` should return `False`.
3. `is_palindrome("madam")` should return `True`.

#### Solution:

```python
def is_palindrome(s):
    return s == s[::-1]

import unittest

class TestIsPalindrome(unittest.TestCase):
    def test_is_palindrome(self):
        self.assertTrue(is_palindrome("racecar"))
        self.assertFalse(is_palindrome("hello"))
        self.assertTrue(is_palindrome("madam"))

if __name__ == "__main__":
    unittest.main()
```

---

### 33. **Find the Factorial of a Number**

#### Question:
Write a function `factorial(n)` that returns the factorial of a number `n`.

#### Tests:
1. `factorial(5)` should return `120`.
2. `factorial(0)` should return `1`.
3. `factorial(3)` should return `6`.

#### Solution:

```python
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

import unittest

class TestFactorial(unittest.TestCase):
    def test_factorial(self):
        self.assertEqual(factorial(5), 120)
        self.assertEqual(factorial(0), 1)
        self.assertEqual(factorial(3), 6)

if __name__ == "__main__":
    unittest.main()
```

---

### 34. **Convert a String to Title Case**

#### Question:
Write a function `to_title_case(s)` that converts a string into title case (capitalizes the first letter of each word).

#### Tests:
1. `to_title_case("hello world")` should return `"Hello World"`.
2. `to_title_case("python programming")` should return `"Python Programming"`.
3. `to_title_case("hello")` should return `"Hello"`.

#### Solution:

```python
def to_title_case(s):
    return s.title()

import unittest

class TestToTitleCase(unittest.TestCase):
    def test_to_title_case(self):
        self.assertEqual(to_title_case("hello world"), "Hello World")
        self.assertEqual(to_title_case("python programming"), "Python Programming")
        self.assertEqual(to_title_case("hello"), "Hello")

if __name__ == "__main__":
    unittest.main()
```

---

### 35. **Find the Intersection of Two Lists**

#### Question:
Write a function `list_intersection(lst1, lst2)` that returns a list of common elements between two lists.

#### Tests:
1. `list_intersection([1, 2, 3], [3, 4, 5])` should return `[3]`.
2. `list_intersection([10, 20], [30, 40])` should return `[]`.
3. `list_intersection([1, 2, 3, 4], [2, 4, 6])` should return `[2, 4]`.

#### Solution:

```python
def list_intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

import unittest

class TestListIntersection(unittest.TestCase):
    def test_list_intersection(self):
        self.assertEqual(list_intersection([1, 2, 3], [3, 4, 5]), [3])
        self.assertEqual(list_intersection([10, 20], [30, 40]), [])
        self.assertEqual(list_intersection([1, 2, 3, 4], [2, 4, 6]), [2, 4])

if __name__ == "__main__":
    unittest.main()
```

---

### 36. **Check if a List is a Sublist of Another List**

#### Question:
Write a function `is_sublist(lst1, lst2)` that checks if `lst1` is a sublist of `lst2`.

#### Tests:
1. `is_sublist([1, 2], [1, 2, 3, 4])` should return `True`.
2. `is_sublist([3, 5], [1, 2, 3, 4])` should return `False`.
3. `is_sublist([], [1, 2, 3])` should return `True`.

#### Solution:

```python
def is_sublist(lst1, lst2):
    return all(item in lst2 for item in lst1)

import unittest

class TestIsSublist(unittest.TestCase):
    def test_is_sublist(self):
        self.assertTrue(is_sublist([1, 2], [1, 2, 3, 4]))
        self.assertFalse(is_sublist([3, 5], [1, 2, 3, 4]))
        self.assertTrue(is_sublist([], [1, 2, 3]))

if __name__ == "__main__":
    unittest.main()
```

---

### 37. **Count the Number of Vowels in a String**

#### Question:
Write a function `count_vowels(s)` that returns the number of vowels (a, e, i, o, u) in a string `s`.

#### Tests:
1. `count_vowels("hello")` should return `2`.
2. `count_vowels("programming")` should return `3`.
3. `count_vowels("aeiou")` should return `5`.

#### Solution:

```python
def count_vowels(s):
    return sum(1 for char in s if char in 'aeiouAEIOU')

import unittest

class TestCountVowels(unittest.TestCase):
    def test_count_vowels(self):
        self.assertEqual(count_vowels("hello"), 2)
        self.assertEqual(count_vowels("programming"), 3)
        self.assertEqual(count_vowels("aeiou"), 5)

if __name__ == "__main__":
    unittest.main()
```

---

### 38. **Flatten a Nested List**

#### Question:
Write a function `flatten(lst)` that flattens a nested list (i.e., a list that may contain other lists).

#### Tests:
1. `flatten([1, [2, 3], 4])` should return `[1, 2, 3, 4]`.
2. `flatten([1, [2, [3, 4]], 5])` should return `[1, 2, 3, 4, 5]`.
3. `flatten([1, 2, 3])` should return `[1, 2, 3]`.

#### Solution:

```python
def flatten(lst):
    flat_list = []
    for item in lst:
        if isinstance(item, list):
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list

import unittest

class TestFlatten(unittest.TestCase):
    def test_flatten(self):
        self.assertEqual(flatten([1, [2, 3], 4]), [1, 2, 3, 4])
        self.assertEqual(flatten([1, [2, [3, 4]], 5]), [1, 2, 3, 4, 5])
        self.assertEqual(flatten([1, 2, 3]), [1, 2, 3])

if __name__ == "__main__":
    unittest.main()
```

---

### 39. **Remove All Occurrences of an Element from a List**

#### Question:
Write a function `remove_element(lst, val)` that removes all occurrences of `val` from the list `lst`.

#### Tests:
1. `remove_element([1, 2, 2, 3], 2)` should return `[1, 3]`.
2. `remove_element([5, 5, 5], 5)` should return `[]`.
3. `remove_element([1, 2, 3, 4], 4)` should return `[1, 2, 3]`.

#### Solution:

```python
def remove_element(lst, val):
    return [item for item in lst if item != val]

import unittest

class TestRemoveElement(unittest.TestCase):
    def test_remove_element(self):
        self.assertEqual(remove_element([1, 2, 2, 3], 2), [1, 3])
        self.assertEqual(remove_element([5, 

5, 5], 5), [])
        self.assertEqual(remove_element([1, 2, 3, 4], 4), [1, 2, 3])

if __name__ == "__main__":
    unittest.main()
```

---

### 40. **Find the Sum of Even Numbers in a List**

#### Question:
Write a function `sum_even(lst)` that returns the sum of all even numbers in the list `lst`.

#### Tests:
1. `sum_even([1, 2, 3, 4])` should return `6`.
2. `sum_even([10, 15, 20])` should return `30`.
3. `sum_even([1, 1, 1])` should return `0`.

#### Solution:

```python
def sum_even(lst):
    return sum(num for num in lst if num % 2 == 0)

import unittest

class TestSumEven(unittest.TestCase):
    def test_sum_even(self):
        self.assertEqual(sum_even([1, 2, 3, 4]), 6)
        self.assertEqual(sum_even([10, 15, 20]), 30)
        self.assertEqual(sum_even([1, 1, 1]), 0)

if __name__ == "__main__":
    unittest.main()
```

---

This concludes questions 31-40. Would you like to proceed with the next set of questions (41-50)?