To implement the requested functions using Test-Driven Development (TDD) in Python, let's first outline the process of TDD. TDD typically involves three steps:

1. **Write a failing test**: Create a test case for the function that will fail because the function is not yet implemented.
2. **Write the code to make the test pass**: Implement the function that satisfies the test.
3. **Refactor the code**: Clean up and refactor the code if needed.

Below is an example of how to approach each function with TDD.

### 1. Sum of all even numbers
**Test**:
```python
def test_sum_even_numbers():
    assert sum_even_numbers([1, 2, 3, 4, 5]) == 6
    assert sum_even_numbers([2, 4, 6, 8]) == 20
    assert sum_even_numbers([1, 3, 5]) == 0
```

**Function**:
```python
def sum_even_numbers(nums):
    return sum(num for num in nums if num % 2 == 0)
```

---

### 2. Count vowels in a string
**Test**:
```python
def test_count_vowels():
    assert count_vowels("python is sweet") == 4
    assert count_vowels("hello") == 2
    assert count_vowels("aeiou") == 5
```

**Function**:
```python
def count_vowels(s):
    return sum(1 for char in s if char in "aeiouAEIOU")
```

---

### 3. Check if two strings are anagrams
**Test**:
```python
def test_is_anagram():
    assert is_anagram("listen", "silent") == True
    assert is_anagram("hello", "world") == False
    assert is_anagram("evil", "vile") == True
```

**Function**:
```python
def is_anagram(str1, str2):
    return sorted(str1) == sorted(str2)
```

---

### 4. Check if a number is prime
**Test**:
```python
def test_is_prime():
    assert is_prime(7) == True
    assert is_prime(10) == False
    assert is_prime(2) == True
    assert is_prime(1) == False
```

**Function**:
```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
```

---

### 5. Check if a string is a palindrome
**Test**:
```python
def test_is_palindrome():
    assert is_palindrome("madam") == True
    assert is_palindrome("hello") == False
    assert is_palindrome("racecar") == True
```

**Function**:
```python
def is_palindrome(s):
    return s == s[::-1]
```

---

### 6. Average of numbers in a list
**Test**:
```python
def test_average():
    assert average([10, 20, 30, 40]) == 25.0
    assert average([1, 1, 1]) == 1.0
    assert average([100, 200, 300]) == 200.0
```

**Function**:
```python
def average(nums):
    return sum(nums) / len(nums)
```

---

### 7. Reverse a string
**Test**:
```python
def test_reverse_string():
    assert reverse_string("hello") == "olleh"
    assert reverse_string("world") == "dlrow"
    assert reverse_string("abc") == "cba"
```

**Function**:
```python
def reverse_string(s):
    return s[::-1]
```

---

### 8. Capitalize a list of strings
**Test**:
```python
def test_capitalize_strings():
    assert capitalize_strings(["apple", "banana", "cherry"]) == ["Apple", "Banana", "Cherry"]
    assert capitalize_strings(["hello", "world"]) == ["Hello", "World"]
    assert capitalize_strings(["apple"]) == ["Apple"]
```

**Function**:
```python
def capitalize_strings(strings):
    return [s.capitalize() for s in strings]
```

---

### 9. Check if list contains duplicate numbers
**Test**:
```python
def test_has_duplicates():
    assert has_duplicates([1, 2, 3, 4, 5, 2]) == True
    assert has_duplicates([1, 2, 3, 4, 5]) == False
    assert has_duplicates([5, 5, 5, 5]) == True
```

**Function**:
```python
def has_duplicates(nums):
    return len(nums) != len(set(nums))
```

---

### 10. Remove all spaces from a string
**Test**:
```python
def test_remove_spaces():
    assert remove_spaces("hello world") == "helloworld"
    assert remove_spaces("  a b c ") == "abc"
    assert remove_spaces("no spaces") == "nospaces"
```

**Function**:
```python
def remove_spaces(s):
    return s.replace(" ", "")
```

---

### 11. Find common elements between two lists
**Test**:
```python
def test_common_elements():
    assert common_elements([1, 2, 3], [3, 4, 5]) == [3]
    assert common_elements([1, 2, 3], [4, 5, 6]) == []
    assert common_elements([7, 8, 9], [9, 8, 7]) == [7, 8, 9]
```

**Function**:
```python
def common_elements(list1, list2):
    return list(set(list1) & set(list2))
```

---

### 12. Sum of the product of all numbers
**Test**:
```python
def test_sum_of_product():
    assert sum_of_product([1, 2, 3, 4]) == 30
    assert sum_of_product([2, 3]) == 12
    assert sum_of_product([5]) == 5
```

**Function**:
```python
def sum_of_product(nums):
    product = 1
    for num in nums:
        product *= num
    return product + sum(nums)
```

---

### 13. Sort a list of words by length
**Test**:
```python
def test_sort_by_length():
    assert sort_by_length(["apple", "cashews", "cherry"]) == ["apple", "cherry", "cashews"]
    assert sort_by_length(["dog", "cat", "elephant"]) == ["dog", "cat", "elephant"]
```

**Function**:
```python
def sort_by_length(words):
    return sorted(words, key=len)
```

---

### 14. Factorial of a number
**Test**:
```python
def test_factorial():
    assert factorial(5) == 120
    assert factorial(0) == 1
    assert factorial(3) == 6
```

**Function**:
```python
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)
```

---

### 15. Sum of digits of a number
**Test**:
```python
def test_sum_digits():
    assert sum_digits(15324) == 15
    assert sum_digits(999) == 27
    assert sum_digits(100) == 1
```

**Function**:
```python
def sum_digits(n):
    return sum(int(digit) for digit in str(n))
```

---

### 16. Sum of odd digits of a number
**Test**:
```python
def test_sum_odd_digits():
    assert sum_odd_digits(12345) == 9
    assert sum_odd_digits(2468) == 0
    assert sum_odd_digits(13579) == 25
```

**Function**:
```python
def sum_odd_digits(n):
    return sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)
```

---

### 17. Merge two lists by interleaving elements
**Test**:
```python
def test_merge_lists():
    assert merge_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
    assert merge_lists([1, 2], [3, 4]) == [1, 3, 2, 4]
    assert merge_lists([], [1, 2]) == [1, 2]
```

**Function**:
```python
def merge_lists(list1, list2):
    return [val for pair in zip(list1, list2) for val in pair]
```

---

### 18. Create acronym from a string
**Test**:
```python
def test_acronym():
    assert acronym("Portable Network Graphics") == "PNG"
    assert acronym("Hypertext Markup Language") == "HTML"
    assert acronym("Central Processing Unit") == "CPU"
```

**Function**:
```python
def acronym(s):
    return ''.join([word[0].upper() for word in s.split()])
```

---

### Final Thoughts:
- Each function is written according to T


def acronym(s):
    return ''.join([word[0].upper() for word in s.split()])
